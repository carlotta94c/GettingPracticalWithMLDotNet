// This file was auto-generated by ML.NET Model Builder.
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.ML.AutoML;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using static Microsoft.ML.DataOperationsCatalog;

namespace TweetsClassification
{
    public partial class TextClassifier
    {
        /// <summary>
        /// model input class for TextClassifier.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [LoadColumn(0)]
            [ColumnName(@"Retweets")]
            public float Retweets { get; set; }

            [LoadColumn(1)]
            [ColumnName(@"Likes")]
            public float Likes { get; set; }

            [LoadColumn(2)]
            [ColumnName(@"Date")]
            public DateTime Date { get; set; }

            [LoadColumn(3)]
            [ColumnName(@"Cleaned_Tweets")]
            public string Cleaned_Tweets { get; set; }

            [LoadColumn(4)]
            [ColumnName(@"IsFake")]
            public bool IsFake { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for TextClassifier.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Retweets")]
            public float Retweets { get; set; }

            [ColumnName(@"Likes")]
            public float Likes { get; set; }

            [ColumnName(@"Date")]
            public DateTime Date { get; set; }

            [ColumnName(@"Cleaned_Tweets")]
            public string Cleaned_Tweets { get; set; }

            [ColumnName(@"IsFake")]
            public uint IsFake { get; set; }

            [ColumnName(@"PredictedLabel")]
            public bool PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("textClassifier.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();

            var dataPath = Path.GetFullPath(@"..\..\..\data\cleandata.csv");

            // Infer column information
            ColumnInferenceResults columnInference =
                mlContext.Auto().InferColumns(dataPath, labelColumnName: "IsFake", groupColumns: false);

            // Create text loader
            TextLoader loader = mlContext.Data.CreateTextLoader(columnInference.TextLoaderOptions);

            // Load data into IDataView
            IDataView data = loader.Load(dataPath);

            // Split into train (80%), validation (20%) sets
            TrainTestData trainValidationData = mlContext.Data.TrainTestSplit(data, testFraction: 0.2);

            //ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);

            ITransformer mlModel = TextClassifier.RetrainPipeline(mlContext, trainValidationData.TrainSet);
            var predictions = mlModel.Transform(trainValidationData.TestSet);

            var evaluationMetrics =
                                    mlContext
                                        .MulticlassClassification
                                        .Evaluate(predictions, "IsFake");

            Console.WriteLine("Retrained model microaccuracy:" + evaluationMetrics.MicroAccuracy);

            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
