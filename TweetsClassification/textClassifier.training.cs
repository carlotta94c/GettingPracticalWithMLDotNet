// This file was auto-generated by ML.NET Model Builder.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.TorchSharp;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace TweetsClassification
{
    public partial class TextClassifier
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData,int batchSize = 32, int maxEpochs = 5)
        {
            var pipeline = BuildPipeline(mlContext, batchSize, maxEpochs);
            var model = pipeline.Fit(trainData);

            return model;
        }

        //auto-generated code
        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext, int batchSize = 32, int maxEpochs = 5)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: @"IsFake", inputColumnName: @"IsFake")
                                    .Append(mlContext.MulticlassClassification.Trainers.TextClassification(labelColumnName: @"IsFake", sentence1ColumnName: @"Cleaned_Tweets", batchSize: batchSize, maxEpochs: maxEpochs))
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName: @"PredictedLabel", inputColumnName: @"PredictedLabel"));

            return pipeline;
        }
    }
}